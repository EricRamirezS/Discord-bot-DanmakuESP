const { stripIndents, oneLine } = require('common-tags');
const Command = require('../base');
const disambiguation = require('../../util').disambiguation;

module.exports = class HelpCommand extends Command {
	constructor(client) {
		super(client, {
			name: 'ayuda',
			group: 'util',
			memberName: 'ayuda',
			aliases: ['commands'],
			description: 'Muestra una lista con los comandos disponibles, o información detallada sobre un comando en específico.',
			details: oneLine`
				El comando puede ser parte de un nombre de comando o un nombre de comando completo.
				Si no se especifica, se enumerarán todos los comandos disponibles.
			`,
			examples: ['ayuda', 'ayuda prefijo'],
			guarded: true,

			args: [
				{
					key: 'command',
					prompt: '¿Para cual comando le gustaría obtener ayuda?',
					type: 'string',
					default: ''
				}
			]
		});
	}

	async run(msg, args) { // eslint-disable-line complexity
		const groups = this.client.registry.groups;
		groups.delete('util');
		const commands = this.client.registry.findCommands(args.command, false, msg);
		const showAll = args.command && args.command.toLowerCase() === 'all';
		if(args.command && !showAll) {
			if(commands.length === 1) {
				let help = stripIndents`
					${msg.anyUsage(`${commands[0].name}${commands[0].format ? ` ${commands[0].format}` : ''}`)}
					${commands[0].description}
				`;
				let grp = commands[0].group;
                if(commands[0].details) help += `\nDetalles: ${commands[0].details}`;
                if(commands[0].examples) help += `\nComandos: \`${commands[0].examples.join('`, `')}\``;
				help += `\nComandos Relacionados: ${(showAll ? grp.commands : grp.commands.filter(cmd => cmd.isUsable(msg)))
                    .map(cmd => `\`${cmd.name}\``).join(', ')
                                        }`;
				const messages = [];
				try {
					messages.push(await msg.channel.send(help));
				} catch(err) {
				}
				return messages;
			} else if(commands.length > 1) {
				return msg.reply(disambiguation(commands, 'comandos'));
			} else {
				return msg.reply(
					`No he podido identificar el comando. Use ${msg.usage(
						null, msg.channel.type === 'dm' ? null : undefined, msg.channel.type === 'dm' ? null : undefined
					)} para ver la lista de todos los comandos.`
				);
			}
		} else {
			const messages = [];
			try {
				messages.push(await msg.reply(stripIndents` aquí están los comandos que puedes usar actualmente
					${(showAll ? groups : groups.filter(grp => grp.commands.some(cmd => cmd.isUsable(msg))))
						.map(grp => stripIndents`
							**${grp.name}**: ${(showAll ? grp.commands : grp.commands.filter(cmd => cmd.isUsable(msg)))
								.map(cmd => `\`${cmd.name}\``).join(', ')
							}
						`).join('\n')
					}
					Use ${this.usage('<comando>', null, null)} para mas información.
				`, { split: true }));
			} catch(err) {
			}
			return messages;
		}
	}
};
